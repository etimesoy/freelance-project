from typing import List

from aiogram import types
from aiogram.dispatcher import FSMContext

from keyboards.default.main_menu import main_keyboard
from keyboards.inline import time_intervals_keyboard, messengers_keyboard
from keyboards.inline.callback_data import skill_name_callback, time_intervals_callback, messengers_callback
from keyboards.default import done_keyboard, communication_ways_keyboard
from states.answers import DetailedAnswer
from loader import dp, db
from utils.misc import rate_limit


@dp.callback_query_handler(skill_name_callback.filter(), state="partnership__get_user_skill_name")
@dp.callback_query_handler(skill_name_callback.filter(), state="work__get_user_skill_name")
async def get_user_skill_description(call: types.CallbackQuery, state: FSMContext, callback_data: dict):
    await call.message.edit_reply_markup()
    user_skill_name = callback_data["name"]
    await state.update_data(user_skill_name=user_skill_name)
    prefix = f"<i>–í—ã –≤—ã–±—Ä–∞–ª–∏: {user_skill_name}</i>\n"
    message_text = prefix + "–û—Ç–ª–∏—á–Ω–æ!\n\n" \
                            "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å–ø–∏—à–∏—Ç–µ –í–∞—à–∏ –Ω–∞–≤—ã–∫–∏ –∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏\n" \
                            "–ë—É–¥–µ—Ç –æ—Ç–ª–∏—á–Ω–æ, –µ—Å–ª–∏ –í—ã —Ç–∞–∫–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–≤–æ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ\n\n" \
                            "<i>–í—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ " \
                            "–æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äú–ì–æ—Ç–æ–≤–æ‚Äù –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é.</i></b>"
    await call.message.answer(message_text, reply_markup=done_keyboard)
    await state.update_data(action="get_user_skill_description")
    await DetailedAnswer.gather_files_and_messages.set()

    state_data = await state.get_data()
    if state_data["command"] == "partnership":
        appeal_id = db.add_partnership_type_2_beginning(state_data["user_tg_username"], state_data["user_name"],
                                                        state_data["employment_type"], state_data.get("company_name"),
                                                        user_skill_name)
    else:  # state_data["command"] == "work"
        appeal_id = db.add_work_beginning(state_data["user_tg_username"], state_data["user_name"], user_skill_name)
    await state.update_data(appeal_id=appeal_id)


async def get_user_contact_details(message: types.Message, state: FSMContext):
    message_text = "–û–≥—Ä–æ–º–Ω–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ä–µ–∑—é–º–µ!\n\n" \
                   "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, " \
                   "—á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å –í–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è (e-mail/–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞)</b>"
    # TODO: –º–æ–∂–µ—Ç —Å—é–¥–∞ –Ω—É–∂–Ω–æ –µ—â–µ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä –∫–∞–∫ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏?
    await message.answer(message_text, reply_markup=types.ReplyKeyboardRemove())
    await state.set_state("get_user_contact_details")


@dp.message_handler(state="get_user_contact_details")
async def send_concluding_message(message: types.Message, state: FSMContext):
    user_contact_details = message.text
    state_data = await state.get_data()
    current_command_is_work = state_data["command"] == "work"
    if current_command_is_work:
        message_text = "<b>–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å –∑–∞ –æ—Ç–∫–ª–∏–∫, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–µ–º –í–∞–º, " \
                       "–∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è —Å –í–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏!</b>"
    else:
        message_text = "<b>–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å –∑–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–µ–º –í–∞–º, " \
                       "–∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è —Å –í–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏!</b>"
    await message.answer(message_text, reply_markup=main_keyboard)
    await state.reset_state()
    if current_command_is_work:
        db.add_work_ending(state_data["appeal_id"], user_contact_details)
    elif state_data["partnership_type"] == "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç":
        db.add_partnership_type_2_ending(state_data["appeal_id"], user_contact_details)


async def save_project_name_get_user_name(message: types.Message, state: FSMContext):
    project_name = message.text
    await state.update_data(project_name=project_name)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ!\n<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç</b>")
    await state.set_state("user_info__get_user_name")


@dp.message_handler(state="user_info__get_user_name")
async def get_communication_way(message: types.Message, state: FSMContext):
    user_name = message.text
    await state.update_data(user_name=user_name)
    await message.answer(f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {user_name} ü§©\n"
                         f"<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–æ–π –≤–∏–¥ —Å–≤—è–∑–∏ –í–∞–º –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ</b>",
                         reply_markup=communication_ways_keyboard)
    await state.set_state("user_info__communication_way")


@dp.message_handler(text="üìß E-mail", state="user_info__communication_way")
@dp.message_handler(text="üì≤ –ó–≤–æ–Ω–æ–∫", state="user_info__communication_way")
@dp.message_handler(text="üì± –ù–∞–ø–∏—Å–∞—Ç—å –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä", state="user_info__communication_way")
async def get_contact_details(message: types.Message, state: FSMContext):
    communication_way = message.text
    await state.update_data(communication_way=communication_way)
    await message.answer("–î–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å! –ú—ã –±—É–¥–µ–º –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–∞ —Å–≤—è–∑–∏!\n"
                         "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å –í–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è</b>",
                         reply_markup=types.ReplyKeyboardRemove())
    state_data = await state.get_data()
    await state.set_state(f"{state_data['command']}__contact_details")


@dp.message_handler(state="user_info__communication_way")
async def bad_get_contact_details(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üôÇ\n\n"
                         "___________________\n"
                         "<i>–ï—Å–ª–∏ –í—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, —Ç–æ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É</i> <b>/menu</b>")


@rate_limit(limit=180)
async def send_gratitude_response(message: types.Message, state: FSMContext, project_budget=""):
    state_data = await state.get_data()
    command = state_data["command"]
    if command == "request":
        gratitude_prefix = "<b>–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å –∑–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É!</b>\n"
    else:  # command == "question"
        gratitude_prefix = "<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –≤–æ–ø—Ä–æ—Å!</b>\n"
    if project_budget:
        project_budget = f"<i>–í—ã –≤—ã–±—Ä–∞–ª–∏: {project_budget}</i>\n"
    if state_data["communication_way"] == "üìß E-mail":
        message_text = project_budget + gratitude_prefix
        message_text += "–ù–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –æ–∑–Ω–∞–∫–æ–º—è—Ç—Å—è —Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π " \
                        "–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤—è—Ç –í–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É."
        await message.answer(message_text, reply_markup=main_keyboard)
        await state.reset_state()
        if command == "request":
            add_new_request_to_db(state_data)
        else:  # command == "question"
            add_new_question_to_db(state_data)
    elif state_data["communication_way"] == "üì≤ –ó–≤–æ–Ω–æ–∫":
        message_text = project_budget + gratitude_prefix
        message_text += "–ù–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –æ–∑–Ω–∞–∫–æ–º—è—Ç—Å—è —Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π " \
                        "–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –í–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω—è—Ç.\n" \
                        "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–≤–æ–Ω–∫–∞ (–ú–°–ö)</b>"
        await message.answer(message_text, reply_markup=time_intervals_keyboard)
        await state.set_state("user_info__choose_time_interval")
    elif state_data["communication_way"] == "üì± –ù–∞–ø–∏—Å–∞—Ç—å –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä":
        message_text = project_budget + gratitude_prefix
        message_text += "–ù–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –æ–∑–Ω–∞–∫–æ–º—è—Ç—Å—è —Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π " \
                        "–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –í–∞–º –Ω–∞–ø–∏—à—É—Ç.\n" \
                        "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –í–∞—Å –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä.</b>"
        await message.answer(message_text, reply_markup=messengers_keyboard)
        await state.set_state("user_info__choose_messenger")


@dp.callback_query_handler(time_intervals_callback.filter(), state="user_info__choose_time_interval")
async def send_concluding_message(call: types.CallbackQuery, state: FSMContext, callback_data: dict):
    await call.message.edit_reply_markup()
    time_interval = callback_data["range"]
    state_data = await state.get_data()

    prefix = f"<i>–í—ã –≤—ã–±—Ä–∞–ª–∏: {time_interval}</i>\n"
    message_text = prefix + "<b>–°–ø–∞—Å–∏–±–æ!</b>\n"
    message_text += "–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–≤—è–∂–µ–º—Å—è —Å –í–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–Ω–µ–π –≤ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –í–∞—Å –≤—Ä–µ–º—è."

    await call.message.answer(message_text, reply_markup=main_keyboard)
    await state.reset_state()
    if state_data["command"] == "request":
        add_new_request_to_db(state_data, time_interval=time_interval)
    else:  # state_data["command"] == "question"
        add_new_question_to_db(state_data, time_interval=time_interval)


@dp.callback_query_handler(messengers_callback.filter(), state="user_info__choose_messenger")
async def send_concluding_message(call: types.CallbackQuery, state: FSMContext, callback_data: dict):
    await call.message.edit_reply_markup()
    messenger = callback_data["messenger"]
    state_data = await state.get_data()

    prefix = f"<i>–í—ã –≤—ã–±—Ä–∞–ª–∏: {messenger}</i>\n"
    message_text = prefix + "<b>–°–ø–∞—Å–∏–±–æ!</b>\n"
    message_text += f"–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–µ–º –í–∞–º –≤ {messenger}, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è —Å –í–∞—à–µ–π –∑–∞—è–≤–∫–æ–π."

    await call.message.answer(message_text, reply_markup=main_keyboard)
    await state.reset_state()
    if state_data["command"] in ["request", "partnership"]:
        add_new_request_to_db(state_data, messenger=messenger)
    else:  # state_data["command"] == "question"
        add_new_question_to_db(state_data, messenger=messenger)


def add_new_feedback_to_db(state_data: dict, discount_code: str = None, desire: str = None):
    db.add_feedback_ending(state_data["appeal_id"], discount_code=discount_code, desire=desire)


def add_new_request_to_db(state_data: dict, time_interval: str = None, messenger: str = None):
    data = dict(
        appeal_id=state_data["appeal_id"],
        project_budget=state_data["project_budget"],
        messenger=messenger, call_time=time_interval
    )
    if state_data.get("partnership_type"):
        db.add_partnership_type_1_ending(**data)
    else:
        db.add_request_ending(**data)


def add_new_question_to_db(state_data: dict, messenger: str = None, time_interval: str = None):
    db.add_question_ending(state_data["appeal_id"], messenger=messenger, call_time=time_interval)


def get_attached_files_links(state_data: dict) -> List[str]:
    files_count = int(state_data.get("files_count", 0))
    return [state_data["file_" + str(idx)] for idx in range(1, files_count + 1)]
