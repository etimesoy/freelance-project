from aiogram import types
from aiogram.dispatcher import FSMContext

from handlers.users.commands.feedback import send_gratitude_response
from handlers.users.commands.request import get_user_project_budget
from states.answers import DetailedAnswer
from loader import dp


@dp.message_handler(text="–ì–æ—Ç–æ–≤–æ", state=DetailedAnswer.gather_files_and_messages)
async def stop_receiving_files(message: types.Message, state: FSMContext):
    state_data = await state.get_data()
    if state_data["action"] == "get_feedback":
        await send_gratitude_response(message, state)
    elif state_data["action"] == "get_user_project_info":
        await get_user_project_budget(message, state)


@dp.message_handler(state=DetailedAnswer.gather_files_and_messages,
                    content_types=types.ContentTypes.TEXT | types.ContentTypes.DOCUMENT |
                                  types.ContentTypes.PHOTO | types.ContentTypes.VIDEO)
async def get_file(message: types.Message, state: FSMContext):
    state_data = await state.get_data()
    document = message.document
    if message.content_type == "video" or document and document.mime_type.startswith("video/"):
        message_text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ–ª—å–∑—è –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –≤–∏–¥–µ–æ üòû\n" \
                       "–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –µ–≥–æ –≤ –æ–±–ª–∞–∫–æ –∏ –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏\n"
        await message.answer(message_text)
        return
    if message.content_type in ["document", "photo"]:
        if files_count := state_data.get("files_count"):
            files_count = int(files_count) + 1
            if files_count > 3:
                message_text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ–ª—å–∑—è –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –±–æ–ª—å—à–µ —Ñ–∞–π–ª–æ–≤ üòû\n" \
                               "–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∏—Ö –≤ –æ–±–ª–∞–∫–æ –∏ –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏\n" \
                               "–¢–∞–∫–∂–µ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∞—Ä—Ö–∏–≤ —Å –≤–∞—à–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏ (–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å: 50 –ú–ë)"
                # TODO: —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å —É–∂–µ –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —ç—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ?
                # TODO: –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∞—Ä—Ö–∏–≤ –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ –ª–∏–º–∏—Ç –≤ 3 —Å–æ–æ–±—â–µ–Ω–∏—è?
                await message.answer(message_text)
                return
        else:
            files_count = 1
        await state.update_data(files_count=files_count)
    elif message.content_type == "text":
        if text_messages_count := state_data.get("text_messages_count"):
            text_messages_count = int(text_messages_count) + 1
            if text_messages_count > 30:
                # TODO: –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ø–∞–º —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                return
        else:
            text_messages_count = 1
        await state.update_data(text_messages_count=text_messages_count)
        # TODO: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ state???
    # TODO: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ/–¥–æ–∫—É–º–µ–Ω—Ç/—Ñ–æ—Ç–æ –≤ –±–¥
