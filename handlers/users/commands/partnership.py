from aiogram import types
from aiogram.dispatcher import FSMContext

from keyboards.default import done_keyboard
from keyboards.default.main_menu import main_keyboard
from keyboards.inline.callback_data import partnership_project_callback, employment_type_callback, skill_name_callback
from loader import dp
from states.answers import DetailedAnswer


@dp.message_handler(commands="partnership")
@dp.message_handler(text="–°–≤—è–∑–∞—Ç—å—Å—è –ø–æ –ø–æ–≤–æ–¥—É —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞")
async def send_welcome_message(message: types.Message):
    message_text = "<b>–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫!</b>\n" \
                   "–û—á–µ–Ω—å —Ä–∞–¥—ã, —á—Ç–æ –í—ã —Ä–µ—à–∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ üôÇ\n\n" \
                   "–ú—ã –∏–º–µ–µ–º –∫–∞–∫ –ø–æ–¥—Ä—è–¥–Ω—ã–π, —Ç–∞–∫ –∏ —Å—É–±–ø–æ–¥—Ä—è–¥–Ω—ã–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã.\n\n" \
                   "________________________\n" \
                   "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–æ–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç</b>"
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton("–Ø —Ö–æ—á—É –æ—Ç–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –Ω–∞ –ø–æ–¥—Ä—è–¥",
                                       callback_data=partnership_project_callback.new(choice="Give"))
        ],
        [
            types.InlineKeyboardButton("–Ø —Ö–æ—á—É –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –Ω–∞ –ø–æ–¥—Ä—è–¥",
                                       callback_data=partnership_project_callback.new(choice="Get"))
        ]
    ])
    await message.answer(message_text, reply_markup=keyboard)


@dp.callback_query_handler(partnership_project_callback.filter(choice="Give"))
async def get_project_name(call: types.CallbackQuery, state: FSMContext, callback_data: dict):
    await call.message.edit_reply_markup()
    prefix = "<i>–í—ã –≤—ã–±—Ä–∞–ª–∏: –Ø —Ö–æ—á—É –æ—Ç–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –Ω–∞ –ø–æ–¥—Ä—è–¥</i>\n"
    message_text = prefix + "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞</b>"
    await call.message.answer(message_text, reply_markup=types.ReplyKeyboardRemove())
    await state.set_state("request__get_project_name")


@dp.callback_query_handler(partnership_project_callback.filter(choice="Get"))
async def get_user_name(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup()
    prefix = "<i>–í—ã –≤—ã–±—Ä–∞–ª–∏: –Ø —Ö–æ—á—É –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –Ω–∞ –ø–æ–¥—Ä—è–¥</i>\n"
    message_text = prefix + "–û—Ç–ª–∏—á–Ω–æ!\n\n<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç</b>"
    await call.message.answer(message_text, reply_markup=types.ReplyKeyboardRemove())
    await state.set_state("partnership__get_user_name")


@dp.message_handler(state="partnership__get_user_name")
async def get_user_employment_type(message: types.Message, state: FSMContext):
    user_name = message.text
    await state.update_data(user_name=user_name)
    message_text = f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {user_name} ü§©\n\n<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ, –∫–æ–≥–æ –í—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç–µ</b>"
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton("üë©‚Äçüíª –§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ",
                                       callback_data=employment_type_callback.new(choice="individual"))
        ],
        [
            types.InlineKeyboardButton("üè¢ –ö–æ–º–ø–∞–Ω–∏—é",
                                       callback_data=employment_type_callback.new(choice="company"))
        ]
    ])
    await message.answer(message_text, reply_markup=keyboard)
    await state.set_state("partnership__get_user_employment_type")


@dp.callback_query_handler(employment_type_callback.filter(choice="company"),
                           state="partnership__get_user_employment_type")
async def get_user_company_name(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(user_employment_type="company")
    await call.message.edit_reply_markup()
    prefix = "<i>–í—ã –≤—ã–±—Ä–∞–ª–∏: üè¢ –ö–æ–º–ø–∞–Ω–∏—é</i>\n"
    message_text = prefix + "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫—É—é –∫–æ–º–ø–∞–Ω–∏—é –í—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç–µ</b>"
    await call.message.answer(message_text)
    await state.set_state("partnership__get_user_company_name")


@dp.message_handler(state="partnership__get_user_company_name")
async def get_company_user_skill_name(message: types.Message, state: FSMContext):
    user_company_name = message.text
    await state.update_data(user_company_name=user_company_name)
    await get_user_skill_name(message, state)


@dp.callback_query_handler(employment_type_callback.filter(choice="individual"),
                           state="partnership__get_user_employment_type")
async def get_individual_user_skill_name(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup()
    await state.update_data(user_employment_type="individual")
    await get_user_skill_name(call.message, state, prefix="<i>–í—ã –≤—ã–±—Ä–∞–ª–∏: üë©‚Äçüíª –§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ</i>\n")


async def get_user_skill_name(message: types.Message, state: FSMContext, prefix=""):
    message_text = prefix + "–û—Ç–ª–∏—á–Ω–æ!\n<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –í–∞—à–µ –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</b>"
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton("üíª FrontEnd", callback_data=skill_name_callback.new(name="üíª FrontEnd"))
        ],
        [
            types.InlineKeyboardButton("üîê BackEnd", callback_data=skill_name_callback.new(name="üîê BackEnd"))
        ],
        [
            types.InlineKeyboardButton("üì± –ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
                                       callback_data=skill_name_callback.new(name="üì± –ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞"))
        ],
        [
            types.InlineKeyboardButton("üí¨ –î—Ä—É–≥–æ–µ", callback_data=skill_name_callback.new(name="üí¨ –î—Ä—É–≥–æ–µ"))
        ]
    ])
    await message.answer(message_text, reply_markup=keyboard)
    await state.set_state("partnership__get_user_skill_name")


@dp.callback_query_handler(skill_name_callback.filter(), state="partnership__get_user_skill_name")
async def get_user_skill_description(call: types.CallbackQuery, state: FSMContext, callback_data: dict):
    await call.message.edit_reply_markup()
    user_skill_name = callback_data["name"]
    await state.update_data(user_skill_name=user_skill_name)
    prefix = f"<i>–í—ã –≤—ã–±—Ä–∞–ª–∏: {user_skill_name}</i>\n"
    message_text = prefix + "–û—Ç–ª–∏—á–Ω–æ!\n\n" \
                   "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å–ø–∏—à–∏—Ç–µ –í–∞—à–∏ –Ω–∞–≤—ã–∫–∏ –∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏\n" \
                   "–ë—É–¥–µ—Ç –æ—Ç–ª–∏—á–Ω–æ, –µ—Å–ª–∏ –í—ã —Ç–∞–∫–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–≤–æ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ\n\n" \
                   "<i>–í—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ " \
                   "–æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äú–ì–æ—Ç–æ–≤–æ‚Äù –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é.</i></b>"
    await call.message.answer(message_text, reply_markup=done_keyboard)
    await state.update_data(action="get_user_skill_description")
    await DetailedAnswer.gather_files_and_messages.set()


async def get_user_contact_details(message: types.Message, state: FSMContext):
    message_text = "–û–≥—Ä–æ–º–Ω–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ —Ä–µ–∑—é–º–µ!\n\n" \
                   "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, " \
                   "—á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å –í–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è (e-mail/–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞)</b>"
    # TODO: –º–æ–∂–µ—Ç —Å—é–¥–∞ –Ω—É–∂–Ω–æ –µ—â–µ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä –∫–∞–∫ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏?
    await message.answer(message_text, reply_markup=types.ReplyKeyboardRemove())
    await state.set_state("partnership__get_user_contact_details")


@dp.message_handler(state="partnership__get_user_contact_details")
async def send_concluding_message(message: types.Message, state: FSMContext):
    user_contact_details = message.text
    # TODO: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥
    message_text = "<b>–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å –∑–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–µ–º –í–∞–º, " \
                   "–∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è —Å –í–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏!</b>"
    await message.answer(message_text, reply_markup=main_keyboard)
    await state.reset_state()
