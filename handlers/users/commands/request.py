from aiogram import types
from aiogram.dispatcher import FSMContext

from keyboards.default import communication_ways_keyboard, done_keyboard
from keyboards.default.main_menu import main_keyboard
from keyboards.inline import project_budget_keyboard, time_intervals_keyboard, messengers_keyboard
from keyboards.inline.callback_data import project_budget_callback, time_intervals_callback, messengers_callback
from states.answers import DetailedAnswer
from loader import dp


@dp.message_handler(commands="request")
@dp.message_handler(text="–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞")
async def send_welcome_message(message: types.Message, state: FSMContext):
    await message.answer("""<b>–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫!</b>
–û—á–µ–Ω—å —Ä–∞–¥—ã, —á—Ç–æ –í—ã —Ä–µ—à–∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –∏ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üôÇ
–ë—É–¥–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã –∑–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–µ–π —Ä–∞–±–æ—Ç–µ! 

________________________
<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞</b>""", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state("request__get_project_name")


@dp.message_handler(state="request__get_project_name")
async def get_project_name(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ª–∏—á–Ω–æ!\n<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç</b>")
    await state.set_state("request__get_user_name")


@dp.message_handler(state="request__get_user_name")
async def get_communication_way(message: types.Message, state: FSMContext):
    user_name = message.text
    await state.update_data(user_name=user_name)
    await message.answer(f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {user_name} ü§©\n"
                         f"<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–æ–π –≤–∏–¥ —Å–≤—è–∑–∏ –í–∞–º –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ</b>",
                         reply_markup=communication_ways_keyboard)
    await state.set_state("request__communication_way")


@dp.message_handler(text="üìß E-mail", state="request__communication_way")
@dp.message_handler(text="üì≤ –ó–≤–æ–Ω–æ–∫", state="request__communication_way")
@dp.message_handler(text="üì± –ù–∞–ø–∏—Å–∞—Ç—å –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä", state="request__communication_way")
async def get_contact_details(message: types.Message, state: FSMContext):
    communication_way = message.text
    await state.update_data(communication_way=communication_way)
    await message.answer("–î–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å! –ú—ã –±—É–¥–µ–º –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–∞ —Å–≤—è–∑–∏!\n"
                         "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å –í–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è</b>",
                         reply_markup=types.ReplyKeyboardRemove())
    await state.set_state("request__contact_details")


@dp.message_handler(state="request__communication_way")
async def bad_get_contact_details(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üôÇ\n\n"
                         "___________________\n"
                         "<i>–ï—Å–ª–∏ –í—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, —Ç–æ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É</i> <b>/menu</b>")


@dp.message_handler(state="request__contact_details")
async def get_user_project_info(message: types.Message, state: FSMContext):
    contact_details = message.text
    await state.update_data(contact_details=contact_details)
    await message.answer("""–û—Ç–ª–∏—á–Ω–æ!

<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –í–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ
–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª—ã –∫ –í–∞—à–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è–º

<i>–í—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äú–ì–æ—Ç–æ–≤–æ‚Äù 
–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é.</i></b>
""", reply_markup=done_keyboard)
    await state.update_data(action="get_user_project_info")
    await DetailedAnswer.gather_files_and_messages.set()


async def get_user_project_budget(message: types.Message, state: FSMContext):
    await message.answer("–û–≥—Ä–æ–º–Ω–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!\n"
                         "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –í–∞—à –±—é–¥–∂–µ—Ç –Ω–∞ –ø—Ä–æ–µ–∫—Ç</b>",
                         reply_markup=project_budget_keyboard)
    await state.set_state("request__get_user_project_budget")


@dp.callback_query_handler(project_budget_callback.filter(), state="request__get_user_project_budget")
async def send_gratitude_response(call: types.CallbackQuery, state: FSMContext, callback_data: dict):
    state_data = await state.get_data()
    user_project_budget = callback_data["amount"]
    await state.update_data(user_project_budget=user_project_budget)
    if state_data["communication_way"] == "üìß E-mail":
        message_text = "<b>–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å –∑–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É!</b>\n" \
                       "–ù–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –æ–∑–Ω–∞–∫–æ–º—è—Ç—Å—è —Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π " \
                       "–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤—è—Ç –í–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É."
        await call.message.answer(message_text, reply_markup=main_keyboard)
        # TODO: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥
        await state.reset_state()
    elif state_data["communication_way"] == "üì≤ –ó–≤–æ–Ω–æ–∫":
        message_text = "<b>–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å –∑–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É!</b>\n" \
                       "–ù–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –æ–∑–Ω–∞–∫–æ–º—è—Ç—Å—è —Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π " \
                       "–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –í–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω—è—Ç.\n" \
                       "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–≤–æ–Ω–∫–∞ (–ú–°–ö)</b>"
        await call.message.answer(message_text, reply_markup=time_intervals_keyboard)
        await state.set_state("request__choose_time_interval")
    elif state_data["communication_way"] == "üì± –ù–∞–ø–∏—Å–∞—Ç—å –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä":
        message_text = "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å –∑–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É!\n" \
                       "–ù–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –æ–∑–Ω–∞–∫–æ–º—è—Ç—Å—è —Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π " \
                       "–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –í–∞–º –Ω–∞–ø–∏—à—É—Ç.\n" \
                       "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –í–∞—Å –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä."
        await call.message.answer(message_text, reply_markup=messengers_keyboard)
        await state.set_state("request__choose_messenger")


@dp.callback_query_handler(time_intervals_callback.filter(), state="request__choose_time_interval")
async def send_concluding_message(call: types.CallbackQuery, state: FSMContext, callback_data: dict):
    time_interval = callback_data["range"]
    # TODO: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å time_interval –∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥
    await call.message.answer("<b>–°–ø–∞—Å–∏–±–æ!</b>\n"
                              "–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–≤—è–∂–µ–º—Å—è —Å –í–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–Ω–µ–π –≤ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –í–∞—Å –≤—Ä–µ–º—è.",
                              reply_markup=main_keyboard)
    await state.reset_state()


@dp.callback_query_handler(messengers_callback.filter(), state="request__choose_messenger")
async def send_concluding_message(call: types.CallbackQuery, state: FSMContext, callback_data: dict):
    messenger = callback_data["messenger"]
    # TODO: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å messenger –∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥
    await call.message.answer("<b>–°–ø–∞—Å–∏–±–æ!</b>\n"
                              f"–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–µ–º –í–∞–º –≤ {messenger}, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è —Å –í–∞—à–µ–π –∑–∞—è–≤–∫–æ–π.",
                              reply_markup=main_keyboard)
    await state.reset_state()
