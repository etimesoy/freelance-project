from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command

from handlers.users.user_info import save_project_name_get_user_name, send_gratitude_response
from keyboards.default import done_keyboard
from keyboards.inline import project_budget_keyboard
from keyboards.inline.callback_data import project_budget_callback
from states.answers import DetailedAnswer
from loader import dp, db


@dp.message_handler(Command("request"))
@dp.message_handler(text="–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞")
async def send_welcome_message(message: types.Message, state: FSMContext):
    await state.update_data(command="request")
    await state.update_data(table_name="requests")
    await state.update_data(user_tg_username=message.from_user.username)
    await message.answer("""<b>–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫!</b>
–û—á–µ–Ω—å —Ä–∞–¥—ã, —á—Ç–æ –í—ã —Ä–µ—à–∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É —Ç—É—Ç üôÇ
–ö–∞–∫ —Ç–æ–ª—å–∫–æ –º—ã –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –í–∞—à—É –∑–∞—è–≤–∫—É, –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å –í–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è üì≤
–ë—É–¥–µ–º –ø—Ä–∏–∑–Ω–∞—Ç–µ–ª—å–Ω—ã –∑–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –æ –í–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ! 

________________________
<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞</b>""", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state("request__get_project_name")


@dp.message_handler(state="request__get_project_name")
async def get_user_name(message: types.Message, state: FSMContext):
    await save_project_name_get_user_name(message, state)


@dp.message_handler(state="partnership__contact_details")
@dp.message_handler(state="request__contact_details")
async def get_user_project_info(message: types.Message, state: FSMContext):
    contact_details = message.text
    await state.update_data(contact_details=contact_details)
    await message.answer("""–û—Ç–ª–∏—á–Ω–æ!

<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –í–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ
–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª—ã –∫ –í–∞—à–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è–º

<i>–í—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äú–ì–æ—Ç–æ–≤–æ‚Äù 
–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é.</i></b>
""", reply_markup=done_keyboard)
    await state.update_data(action="get_user_project_info")
    await DetailedAnswer.gather_files_and_messages.set()

    state_data = await state.get_data()
    if state_data["command"] == "request":
        appeal_id = db.add_request_beginning(state_data["user_tg_username"], state_data["user_name"],
                                             state_data["project_name"], state_data["communication_way"],
                                             contact_details)
    else:  # state_data["command"] == "partnership"
        appeal_id = db.add_partnership_type_1_beginning(state_data["user_tg_username"], state_data["user_name"],
                                                        state_data["project_name"], state_data["communication_way"],
                                                        contact_details)
    await state.update_data(appeal_id=appeal_id)


async def get_user_project_budget(message: types.Message, state: FSMContext):
    await message.answer("–û–≥—Ä–æ–º–Ω–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!\n"
                         "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –í–∞—à –±—é–¥–∂–µ—Ç –Ω–∞ –ø—Ä–æ–µ–∫—Ç</b>",
                         reply_markup=project_budget_keyboard)
    await state.set_state("request__get_user_project_budget")


@dp.callback_query_handler(project_budget_callback.filter(), state="request__get_user_project_budget")
async def save_user_project_budget(call: types.CallbackQuery, state: FSMContext, callback_data: dict):
    await call.message.edit_reply_markup()
    project_budget = callback_data["amount"]
    await state.update_data(project_budget=project_budget)
    await send_gratitude_response(call.message, state, project_budget)
